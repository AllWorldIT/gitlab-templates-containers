image: registry.conarx.tech/containers/docker


default:
  tags:
    - dind


# Use a docker service to build our images
services:
  - name: registry.conarx.tech/containers/docker-in-docker
    alias: docker


stages:
  - validate
  - build
  - test
  - release


# Setup docker
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: /certs/client


# Log into our repositories before docker-related scripts are being run
.docker_login_template: &docker_login
  before_script:
    # Group login incase we need to pull group images from a private registry
    - |
      if [ -n "$GROUP_CI_REGISTRY_USER" -a -n "$GROUP_CI_REGISTRY_PASSWORD" ]; then
        echo "Group CI login to '${GROUP_CI_REGISTRY}'...";
        echo "$GROUP_CI_REGISTRY_PASSWORD" | docker login --username "$GROUP_CI_REGISTRY_USER" --password-stdin "$GROUP_CI_REGISTRY";
      fi
    # Login to this repositories registry
    - echo "$CI_REGISTRY_PASSWORD" | docker login --username "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    # Docker Hub login
    - |
      if [ -n "$DOCKERHUB_REGISTRY" -a -n "$DOCKERHUB_REGISTRY_USER" -a -n "$DOCKERHUB_REGISTRY_PASSWORD" ]; then
        echo "DockerHub login...";
        echo "$DOCKERHUB_REGISTRY_PASSWORD" | docker login --username "$DOCKERHUB_REGISTRY_USER" --password-stdin;
      fi


commitlint:
  stage: validate
  image: registry.conarx.tech/containers/commitlint
  script:
    - cd "$CI_PROJECT_DIR"
    - run-commitlint --from="origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
  rules:
    - if: $CI_MERGE_REQUEST_IID


shellcheck:
  stage: validate
  image: registry.conarx.tech/containers/shellcheck
  script:
    - cd "$CI_PROJECT_DIR"
    - run-shellcheck .
  rules:
    - if: $CI_MERGE_REQUEST_IID


build:
  stage: build
  <<: *docker_login
  script:
    #
    # Work out image naming and versioning
    #
    - if [ -e docker_release_version.sh ]; then source ./docker_release_version.sh; fi
    - TIMESTAMP=$(date +%Y%m%d%H%M%S)
    - TIMESTAMP_RFC3339=$(date -Iseconds | sed -e 's/T/ /')
    - |
      echo "TIMESTAMP              : $TIMESTAMP"
      echo "TIMESTAMP_RFC3339      : $TIMESTAMP_RFC3339"
      echo "CI_COMMIT_BRANCH       : $CI_COMMIT_BRANCH (default: $CI_DEFAULT_BRANCH)"
      echo "CI_COMMIT_TAG          : $CI_COMMIT_TAG"
      echo "CONTAINER_VERSION_EXTRA: $CONTAINER_VERSION_EXTRA"
    # Setup the CI image name we'll be using
    - export CONTAINER_TAG="/pipelines:$CI_PIPELINE_IID"
    # If we're a branch we'll be adding a :latest push
    - |
      set -x
      # If we're dealing with a branch
      if [ -n "$CI_COMMIT_BRANCH" ]; then
        BRANCH_VER=$(echo "$CI_COMMIT_BRANCH" | sed -e 's/^v//')
        if [ "$CI_COMMIT_BRANCH" = "$CI_DEFAULT_BRANCH" ]; then
          REPO_PREFIX=""
          export CONTAINER_IMAGE_PUSH_DH=":latest"
        else
          REPO_PREFIX="/$BRANCH_VER"
          export CONTAINER_IMAGE_PUSH_DH=":latest-$BRANCH_VER"
        fi
        CONTAINER_VERSION="rolling$REPO_PREFIX $TIMESTAMP"
        if [ -n "$CONTAINER_VERSION_EXTRA" ]; then
          CONTAINER_VERSION="$CONTAINER_VERSION/$CONTAINER_VERSION_EXTRA"
          export CONTAINER_IMAGE_PUSH_EXTRA="${REPO_PREFIX}:$CONTAINER_VERSION_EXTRA"
          if [ "$CI_COMMIT_BRANCH" = "$CI_DEFAULT_BRANCH" ]; then
            export CONTAINER_IMAGE_PUSH_DH_EXTRA=":$CONTAINER_VERSION_EXTRA"
          else
            export CONTAINER_IMAGE_PUSH_DH_EXTRA=":$BRANCH_VER-$CONTAINER_VERSION_EXTRA"
          fi
        fi
        export CONTAINER_IMAGE_PUSH="${REPO_PREFIX}:$TIMESTAMP"
        export CONTAINER_IMAGE_PUSH_LATEST="${REPO_PREFIX}:latest"
      # If we're dealing with a tag
      elif [ -n "$CI_COMMIT_TAG" ]; then
        # Remove v before the version
        CONTAINER_IMAGE_TAG_REL=$(echo "$CI_COMMIT_TAG" | sed -e 's/^v//')
        # Remove the release
        CONTAINER_IMAGE_TAG=$(echo "$CONTAINER_IMAGE_TAG_REL" | sed -E -e 's/-[0-9][0-9\.]*$//')
        # If both match we didn't have a correctly formatted version
        if [ "$CONTAINER_IMAGE_TAG_REL" == "$CONTAINER_IMAGE_TAG" ]; then
          echo "ERROR - Tag '$CI_COMMIT_TAG' is in the wrong format. It should be 'vX.Y.Z-A.B'"
          exit 1
        fi
        REPO_PREFIX="/$CONTAINER_IMAGE_TAG"
        CONTAINER_VERSION="version $CI_COMMIT_TAG"
        export CONTAINER_IMAGE_PUSH="${REPO_PREFIX}:$CONTAINER_IMAGE_TAG_REL"

        export CONTAINER_IMAGE_PUSH_LATEST="${REPO_PREFIX}:latest"
        export CONTAINER_IMAGE_PUSH_DH=":$CONTAINER_IMAGE_TAG_REL"

      else
        echo "ERROR determining type of image"
        exit 1
      fi
      export PIPELINE_IMAGE="$CI_REGISTRY_IMAGE$CONTAINER_TAG"
      set +x

    #
    # Save variables we need later
    #
    - echo "PIPELINE_IMAGE=$PIPELINE_IMAGE" > build.env
    - echo "CONTAINER_TAG=$CONTAINER_TAG" >> build.env
    - echo "CONTAINER_IMAGE_PUSH=$CONTAINER_IMAGE_PUSH" >> build.env
    - echo "CONTAINER_IMAGE_PUSH_EXTRA=$CONTAINER_IMAGE_PUSH_EXTRA" >> build.env
    - echo "CONTAINER_IMAGE_PUSH_LATEST=$CONTAINER_IMAGE_PUSH_LATEST" >> build.env
    - echo "CONTAINER_IMAGE_PUSH_DH=$CONTAINER_IMAGE_PUSH_DH" >> build.env
    - echo "CONTAINER_IMAGE_PUSH_DH_EXTRA=$CONTAINER_IMAGE_PUSH_DH_EXTRA" >> build.env

    #
    # Work out labels to add
    #
    - |
      set -x
      set --
      set -- "$@" --label "org.opencontainers.image.created=$TIMESTAMP_RFC3339"
      set -- "$@" --label "org.opencontainers.image.revision=$CI_COMMIT_SHORT_SHA"

      [ -n "$CONTAINER_VENDOR" ] && set -- "$@" --label "org.opencontainers.image.vendor=$CONTAINER_VENDOR"

      set -- "$@" --label "org.opencontainers.image.ref.name=$CONTAINER_IMAGE_PUSH"

      [ -z "$CONTAINER_TITLE" ] && CONTAINER_TITLE="$CI_PROJECT_TITLE"
      set -- "$@" --label "org.opencontainers.image.title=$CONTAINER_TITLE"

      [ -z "$CONTAINER_DESCRIPTION" ] && CONTAINER_DESCRIPTION="$CI_PROJECT_DESCRIPTION"
      [ -n "$CONTAINER_DESCRIPTION" ] && set -- "$@" --label "org.opencontainers.image.description=$CONTAINER_DESCRIPTION"

      [ -z "$CONTAINER_URL" ] && CONTAINER_URL="$CI_PROJECT_URL"
      set -- "$@" --label "org.opencontainers.image.url=$CONTAINER_URL"

      [ -z "$CONTAINER_DOCUMENTATION" ] && CONTAINER_DOCUMENTATION="$CI_PROJECT_URL"
      set -- "$@" --label "org.opencontainers.image.documentation=$CONTAINER_DOCUMENTATION"

      [ -z "$CONTAINER_SOURCE" ] && CONTAINER_SOURCE="$CI_PROJECT_URL.git"
      set -- "$@" --label "org.opencontainers.image.source=$CONTAINER_SOURCE"
      set +x

    #
    # Time to build
    #
    # Work out base image name and pull base image
    # NK: we need to do this so we can get the layer count below
    - BASE_IMAGE_NAME=$(grep -E '^LABEL org.opencontainers.image.base.name' Dockerfile | awk '{ print $3 }' | sed -e 's/"//g')
    - echo "Pulling base image..."
    - docker pull "$BASE_IMAGE_NAME"
    # Build time
    - echo "Building image..."
    - |
      echo "VERSION_INFO: $VERSION_INFO"
      echo "Labels: " "$@"
    - docker buildx build --pull
      --build-arg=VERSION_INFO="$CI_PROJECT_TITLE [$CI_PROJECT_PATH] $CONTAINER_VERSION build $CI_PIPELINE_IID commit $CI_COMMIT_SHORT_SHA ($TIMESTAMP_RFC3339)"
      "$@"
      --tag rawimage
      .
    # Grab base image layer count
    - LAYERS_BASE=$(docker history "$BASE_IMAGE_NAME")
    - LAYERS_BASE_COUNT=$(echo "$LAYERS_BASE" | tail -n +2 | wc -l)
    - echo -e "BASE LAYERS -> $LAYERS_BASE_COUNT\n$LAYERS_BASE"
    # Grab built image layer count
    - LAYERS_BUILD=$(docker history rawimage)
    - LAYERS_BUILD_COUNT=$(echo "$LAYERS_BUILD" | tail -n +2 | wc -l)
    - echo -e "BASE LAYERS -> $LAYERS_BUILD_COUNT\n$LAYERS_BUILD"
    # Work out squash count
    - LAYER_SQUASH_COUNT=$((LAYERS_BUILD_COUNT - LAYERS_BASE_COUNT))
    # Squash image - grab number of layers
    - echo "Squashing '$PIPELINE_IMAGE' from '$BASE_IMAGE_NAME/$BASE_IMAGE_ID'..."
    - docker-squash -f "$LAYER_SQUASH_COUNT" -t "$PIPELINE_IMAGE" rawimage
    # Push container tag
    - echo "Pushing '$PIPELINE_IMAGE'..."
    - docker push "$PIPELINE_IMAGE"

  artifacts:
    reports:
      dotenv: build.env


test:
  stage: test
  <<: *docker_login
  script:
    - |
      set -x
      echo "Pulling '$PIPELINE_IMAGE'..."
      docker pull "$PIPELINE_IMAGE"
      if [ -n "$RUN_TESTS_PRIVILEGED" ]; then
        docker run --privileged -e FDC_CI=true "$PIPELINE_IMAGE"
      else
        docker run -e FDC_CI=true "$PIPELINE_IMAGE"
      fi
      set +x
  dependencies:
    - build


release:
  stage: release
  <<: *docker_login
  script:
    # Grab CI image
    - echo "Pulling '$PIPELINE_IMAGE'..."
    - docker pull "$PIPELINE_IMAGE"
    # This is the versioned image we're pushing
    - |
      set -x
      if [ -n "$CONTAINER_IMAGE_PUSH" ]; then
        echo "Pushing '$CI_REGISTRY_IMAGE$CONTAINER_IMAGE_PUSH'..."
        docker tag "$PIPELINE_IMAGE" "$CI_REGISTRY_IMAGE$CONTAINER_IMAGE_PUSH"
        docker push "$CI_REGISTRY_IMAGE$CONTAINER_IMAGE_PUSH"
      fi
      set +x
    # This is the extra versioned image we're pushing
    - |
      set -x
      if [ -n "$CONTAINER_IMAGE_PUSH_EXTRA" ]; then
        echo "Pushing '$CI_REGISTRY_IMAGE$CONTAINER_IMAGE_PUSH_EXTRA'..."
        docker tag "$PIPELINE_IMAGE" "$CI_REGISTRY_IMAGE$CONTAINER_IMAGE_PUSH_EXTRA"
        docker push "$CI_REGISTRY_IMAGE$CONTAINER_IMAGE_PUSH_EXTRA"
      fi
      set +x
    # And this is the :latest if applicable
    - |
      set -x
      if [ -n "$CONTAINER_IMAGE_PUSH_LATEST" ]; then
        echo "Pushing :latest '$CI_REGISTRY_IMAGE$CONTAINER_IMAGE_PUSH_LATEST'..."
        docker tag "$PIPELINE_IMAGE" "$CI_REGISTRY_IMAGE$CONTAINER_IMAGE_PUSH_LATEST"
        docker push "$CI_REGISTRY_IMAGE$CONTAINER_IMAGE_PUSH_LATEST"
      fi
    # Check if we're pushing to Docker Hub
    - |
      set -x
      if [ -n "$DOCKERHUB_REGISTRY" ]; then
        echo "Pushing "$CONTAINER_IMAGE_PUSH_DH" to Docker Hub..."
        docker tag "$PIPELINE_IMAGE" "$DOCKERHUB_REGISTRY$CONTAINER_IMAGE_PUSH_DH"
        docker push "$DOCKERHUB_REGISTRY$CONTAINER_IMAGE_PUSH_DH"
        if [ -n "$CONTAINER_IMAGE_PUSH_DH_EXTRA" ]; then
          echo "Pushing "$CONTAINER_IMAGE_PUSH_DH_EXTRA" to Docker Hub..."
          docker tag "$PIPELINE_IMAGE" "$DOCKERHUB_REGISTRY$CONTAINER_IMAGE_PUSH_DH_EXTRA"
          docker push "$DOCKERHUB_REGISTRY$CONTAINER_IMAGE_PUSH_DH_EXTRA"
        fi
      fi
      set +x
  dependencies:
    - build
