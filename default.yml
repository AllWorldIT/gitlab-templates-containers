image: docker:latest


# Use a docker service to build our images
services:
  - docker:dind


stages:
  - build
  - test
  - release


# Setup docker
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: /certs/client


# Log into our repositories before any script being run
before_script:
  - |
    if [ -n "${GROUP_CI_REGISTRY_USER}" -a -n "${GROUP_CI_REGISTRY_PASSWORD}" ]; then
      echo "Group CI login..."
      echo "${GROUP_CI_REGISTRY_PASSWORD}" | docker login --username "${GROUP_CI_REGISTRY_USER}" --password-stdin "${GROUP_CI_REGISTRY}"
    fi
  - echo "${CI_REGISTRY_PASSWORD}" | docker login --username "${CI_REGISTRY_USER}" --password-stdin "${CI_REGISTRY}"


build:
  stage: build
  tags:
    - dind
  script:
    #
    # Work out image naming and versioning
    #
    - TIMESTAMP=$(date +%Y%m%d%H%M%S)
    - TIMESTAMP_RFC3339=$(date -Iseconds | sed -e 's/T/ /')
    - |
      echo "TIMESTAMP: ${TIMESTAMP}"
      echo "TIMESTAMP_RFC3339: ${TIMESTAMP_RFC3339}"
      echo "CI_COMMIT_BRANCH: ${CI_COMMIT_BRANCH}"
      echo "CI_COMMIT_TAG: ${CI_COMMIT_TAG}"
    # Setup the CI image name we'll be using
    - export CONTAINER_TAG="${CI_REGISTRY_IMAGE}/pipelines:${CI_PIPELINE_IID}"
    # If we're a branch we'll be adding a :latest push
    - |
      if [ -n "${CI_COMMIT_BRANCH}" ]; then
        if [ "${CI_COMMIT_BRANCH}" != "master" -a "${CI_COMMIT_BRANCH}" != "main" ]; then
          REPO_PREFIX="/${CI_COMMIT_BRANCH}"
        else
          REPO_PREFIX=""
        fi
        CONTAINER_VERSION="rolling${REPO_PREFIX} ${TIMESTAMP}"
        export CONTAINER_IMAGE_PUSH="${CI_REGISTRY_IMAGE}${REPO_PREFIX}:${TIMESTAMP}"
        export CONTAINER_IMAGE_PUSH_LATEST="${CI_REGISTRY_IMAGE}${REPO_PREFIX}:latest"
      # And if we're tagged, it means we're just pushing that tag
      elif [ -n "${CI_COMMIT_TAG}" ]; then
        # Remove v before the version
        CONTAINER_IMAGE_TAG_REL=$(echo "${CI_COMMIT_TAG}" | sed -e 's/^v//')
        # Remove the release
        CONTAINER_IMAGE_TAG=$(echo "${CONTAINER_IMAGE_TAG_REL}" | sed -E -e 's/-[0-9][0-9\.]*$//')
        # If both match we didn't have a correctly formatted version
        if [ "${CONTAINER_IMAGE_TAG_REL}" == "${CONTAINER_IMAGE_TAG}" ]; then
          echo "ERROR - Tag is in the wrong format. It should be 'vX.Y.Z-A.B'"
          exit 1
        fi
        CONTAINER_VERSION="version ${CI_COMMIT_TAG}"
        export CONTAINER_IMAGE_PUSH="${CI_REGISTRY_IMAGE}:${CONTAINER_IMAGE_TAG}"
      else
        echo "ERROR determining type of image"
        exit 1
      fi

    #
    # Save variables we need later
    #
    - echo "CONTAINER_TAG='${CONTAINER_TAG}'" > build.env
    - echo "CONTAINER_IMAGE_PUSH='${CONTAINER_IMAGE_PUSH}'" >> build.env
    - echo "CONTAINER_IMAGE_PUSH_LATEST='${CONTAINER_IMAGE_PUSH_LATEST}'" >> build.env

    #
    # Work out labels to add
    #
    - LABELS=()
    - LABELS+=(--label "org.opencontainers.image.created=$TIMESTAMP_RFC3339")
    - LABELS+=(--label "org.opencontainers.image.revision=$CI_COMMIT_SHORT_SHA")

    - \[ -n "$CONTAINER_VENDOR" ] && LABELS+=(--label "org.opencontainers.image.vendor=$CONTAINER_VENDOR")

    - LABELS+=(--label "org.opencontainers.image.ref.name=$CI_PROJECT_PATH")

    - \[ -z "$CONTAINER_TITLE" ] && CONTAINER_TITLE="$CI_PROJECT_TITLE"
    - LABELS+=(--label "org.opencontainers.image.title=$CONTAINER_TITLE")

    - \[ -z "$CONTAINER_DESCRIPTION" ] && CONTAINER_DESCRIPTION="$CI_PROJECT_DESCRIPTION"
    - LABELS+=(--label "org.opencontainers.image.description=$PROJECT_DESCRIPTION")

    - LABELS+=(--label "org.opencontainers.image.base.name=$CONTAINER_IMAGE_PUSH")

    - \[ -z "$CONTAINER_URL" ] && CONTAINER_URL="$CI_PROJECT_URL"
    - LABELS+=(--label "org.opencontainers.image.url=$CONTAINER_URL")

    - \[ -z "$CONTAINER_DOCUMENTATION" ] && CONTAINER_DOCUMENTATION="$CI_PROJECT_URL"
    - LABELS+=(--label "org.opencontainers.image.documentation=$CONTAINER_DOCUMENTATION)

    - \[ -z "$CONTAINER_SOURCE" ] && CONTAINER_SOURCE="${CI_PROJECT_URL}.git"
    - LABELS+=(--label "org.opencontainers.image.source=$CONTAINER_SOURCE")

    #
    # Time to build
    #
    - docker build --pull
      --build-arg=VERSION_INFO="${CI_PROJECT_TITLE} [${CI_PROJECT_PATH}] ${CONTAINER_VERSION} build ${CI_PIPELINE_IID} commit ${CI_COMMIT_SHORT_SHA} ($TIMESTAMP_RFC3339)"
      "${LABELS[@]}"
      --tag "${CONTAINER_TAG}" .

    # Push container tag
    - docker push "${CONTAINER_TAG}"

  artifacts:
    reports:
      dotenv: build.env


test:
  stage: test
  tags:
    - dind
  script:
    - docker pull "${CONTAINER_TAG}"
    - docker run -e CI=true "${CONTAINER_TAG}"
  dependencies:
    - build


release:
  stage: release
  tags:
    - dind
  script:
    # Grab CI image
    - docker pull "${CONTAINER_TAG}"
    # This is the versioned image we're pushing
    - |
      if [ -n "${CONTAINER_IMAGE_PUSH}" ]; then
        echo "Pushing '${CONTAINER_IMAGE_PUSH}"
        docker tag "${CONTAINER_TAG}" "${CONTAINER_IMAGE_PUSH}"
        docker push "${CONTAINER_IMAGE_PUSH}"
      fi
    # And this is the :latest if applicable
    - |
      if [ -n "${CONTAINER_IMAGE_PUSH_LATEST}" ]; then
        echo "Pushing :latest '${CONTAINER_IMAGE_PUSH_LATEST}"
        docker tag "${CONTAINER_TAG}" "${CONTAINER_IMAGE_PUSH_LATEST}"
        docker push "${CONTAINER_IMAGE_PUSH_LATEST}"
      fi
  dependencies:
    - build

